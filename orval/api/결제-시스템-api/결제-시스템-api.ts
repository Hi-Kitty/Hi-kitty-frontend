/**
 * Generated by orval v6.16.0 🍺
 * Do not edit manually.
 * Hi Kitty 프로젝트!!
 * Hi Kitty의 API 명세서입니다.
 * OpenAPI spec version: v1
 */
import {
  useQuery,
  useMutation
} from 'react-query'
import type {
  UseQueryOptions,
  UseMutationOptions,
  QueryFunction,
  MutationFunction,
  UseQueryResult,
  QueryKey
} from 'react-query'
import type {
  ApiResultOrderResponse,
  OrderRequest,
  ApiResultCompleteResponse,
  ApiResultPaymentResponse,
  SuccessParams,
  ApiResultPaymentFailRequest,
  FailParams
} from '../../model'
import { customInstance } from '../../../api/axios';


// eslint-disable-next-line
  type SecondParameter<T extends (...args: any) => any> = T extends (
  config: any,
  args: infer P,
) => any
  ? P
  : never;

/**
 * 기부하기 버튼을 누르면 해당 API를 전송해서 응답 값을 받으세요.
 * @summary 결제 요청
 */
export const request = (
    orderRequest: OrderRequest,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<ApiResultOrderResponse>(
      {url: `/api/v1/payments/request`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: orderRequest
    },
      options);
    }
  


export const getRequestMutationOptions = <TError = unknown,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof request>>, TError,{data: OrderRequest}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof request>>, TError,{data: OrderRequest}, TContext> => {
 const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof request>>, {data: OrderRequest}> = (props) => {
          const {data} = props ?? {};

          return  request(data,requestOptions)
        }

        

 
   return  { mutationFn, ...mutationOptions }}

    export type RequestMutationResult = NonNullable<Awaited<ReturnType<typeof request>>>
    export type RequestMutationBody = OrderRequest
    export type RequestMutationError = unknown

    /**
 * @summary 결제 요청
 */
export const useRequest = <TError = unknown,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof request>>, TError,{data: OrderRequest}, TContext>, request?: SecondParameter<typeof customInstance>}
) => {
    
      const mutationOptions = getRequestMutationOptions(options);
     
      return useMutation(mutationOptions);
    }
    /**
 * 결제 완료시 마지막으로 사용자에게 알린다.
 * @summary 결제 완료 결과 창
 */
export const complete = (
    orderId: string,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      return customInstance<ApiResultCompleteResponse>(
      {url: `/api/v1/payments/${orderId}`, method: 'get', signal
    },
      options);
    }
  

export const getCompleteQueryKey = (orderId: string,) => [`/api/v1/payments/${orderId}`] as const;
  

    
export const getCompleteQueryOptions = <TData = Awaited<ReturnType<typeof complete>>, TError = unknown>(orderId: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof complete>>, TError, TData>, request?: SecondParameter<typeof customInstance>}
): UseQueryOptions<Awaited<ReturnType<typeof complete>>, TError, TData> & { queryKey: QueryKey } => {
const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getCompleteQueryKey(orderId);

  
  
    const queryFn: QueryFunction<Awaited<ReturnType<typeof complete>>> = ({ signal }) => complete(orderId, requestOptions, signal);
    
      
      
   return  { queryKey, queryFn, enabled: !!(orderId), ...queryOptions}}

export type CompleteQueryResult = NonNullable<Awaited<ReturnType<typeof complete>>>
export type CompleteQueryError = unknown

/**
 * @summary 결제 완료 결과 창
 */
export const useComplete = <TData = Awaited<ReturnType<typeof complete>>, TError = unknown>(
 orderId: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof complete>>, TError, TData>, request?: SecondParameter<typeof customInstance>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getCompleteQueryOptions(orderId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}

/**
 * 결제 성공 시 최종 결제 승인 요청을 보낸다.
 * @summary 결제 성공 리다이렉트
 */
export const success = (
    params: SuccessParams,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      return customInstance<ApiResultPaymentResponse>(
      {url: `/api/v1/payments/success`, method: 'get',
        params, signal
    },
      options);
    }
  

export const getSuccessQueryKey = (params: SuccessParams,) => [`/api/v1/payments/success`, ...(params ? [params]: [])] as const;
  

    
export const getSuccessQueryOptions = <TData = Awaited<ReturnType<typeof success>>, TError = unknown>(params: SuccessParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof success>>, TError, TData>, request?: SecondParameter<typeof customInstance>}
): UseQueryOptions<Awaited<ReturnType<typeof success>>, TError, TData> & { queryKey: QueryKey } => {
const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getSuccessQueryKey(params);

  
  
    const queryFn: QueryFunction<Awaited<ReturnType<typeof success>>> = ({ signal }) => success(params, requestOptions, signal);
    
      
      
   return  { queryKey, queryFn, ...queryOptions}}

export type SuccessQueryResult = NonNullable<Awaited<ReturnType<typeof success>>>
export type SuccessQueryError = unknown

/**
 * @summary 결제 성공 리다이렉트
 */
export const useSuccess = <TData = Awaited<ReturnType<typeof success>>, TError = unknown>(
 params: SuccessParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof success>>, TError, TData>, request?: SecondParameter<typeof customInstance>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getSuccessQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}

/**
 * 결제 실패 시 최종 결제 승인 요청을 보낸다.
 * @summary 결제 실패 리다이렉트
 */
export const fail = (
    params: FailParams,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      return customInstance<ApiResultPaymentFailRequest>(
      {url: `/api/v1/payments/fail`, method: 'get',
        params, signal
    },
      options);
    }
  

export const getFailQueryKey = (params: FailParams,) => [`/api/v1/payments/fail`, ...(params ? [params]: [])] as const;
  

    
export const getFailQueryOptions = <TData = Awaited<ReturnType<typeof fail>>, TError = unknown>(params: FailParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof fail>>, TError, TData>, request?: SecondParameter<typeof customInstance>}
): UseQueryOptions<Awaited<ReturnType<typeof fail>>, TError, TData> & { queryKey: QueryKey } => {
const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getFailQueryKey(params);

  
  
    const queryFn: QueryFunction<Awaited<ReturnType<typeof fail>>> = ({ signal }) => fail(params, requestOptions, signal);
    
      
      
   return  { queryKey, queryFn, ...queryOptions}}

export type FailQueryResult = NonNullable<Awaited<ReturnType<typeof fail>>>
export type FailQueryError = unknown

/**
 * @summary 결제 실패 리다이렉트
 */
export const useFail = <TData = Awaited<ReturnType<typeof fail>>, TError = unknown>(
 params: FailParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof fail>>, TError, TData>, request?: SecondParameter<typeof customInstance>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getFailQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}

