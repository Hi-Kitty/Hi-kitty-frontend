/**
 * Generated by orval v6.16.0 🍺
 * Do not edit manually.
 * Hi Kitty 프로젝트!!
 * Hi Kitty의 API 명세서입니다.
 * OpenAPI spec version: v1
 */
import {
  useQuery,
  useMutation
} from 'react-query'
import type {
  UseQueryOptions,
  UseMutationOptions,
  QueryFunction,
  MutationFunction,
  UseQueryResult,
  QueryKey
} from 'react-query'
import type {
  ApiResultHeartResponse,
  ApiResultTotalAmountResponse,
  ApiResultPageCompleteResponse,
  GetOrdersParams
} from '../../model'
import { customInstance } from '../../../api/axios';


// eslint-disable-next-line
  type SecondParameter<T extends (...args: any) => any> = T extends (
  config: any,
  args: infer P,
) => any
  ? P
  : never;

/**
 * @summary 기부자 하트 생성
 */
export const create2 = (
    boardId: number,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<ApiResultHeartResponse>(
      {url: `/api/v1/doners/boards/${boardId}/hearts`, method: 'post'
    },
      options);
    }
  


export const getCreate2MutationOptions = <TError = unknown,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof create2>>, TError,{boardId: number}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof create2>>, TError,{boardId: number}, TContext> => {
 const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof create2>>, {boardId: number}> = (props) => {
          const {boardId} = props ?? {};

          return  create2(boardId,requestOptions)
        }

        

 
   return  { mutationFn, ...mutationOptions }}

    export type Create2MutationResult = NonNullable<Awaited<ReturnType<typeof create2>>>
    
    export type Create2MutationError = unknown

    /**
 * @summary 기부자 하트 생성
 */
export const useCreate2 = <TError = unknown,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof create2>>, TError,{boardId: number}, TContext>, request?: SecondParameter<typeof customInstance>}
) => {
    
      const mutationOptions = getCreate2MutationOptions(options);
     
      return useMutation(mutationOptions);
    }
    /**
 * 기부자가 후원한 총 금액과 후원 횟수
 * @summary 총 후원
 */
export const getTotals = (
    
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      return customInstance<ApiResultTotalAmountResponse>(
      {url: `/api/v1/doners/totals`, method: 'get', signal
    },
      options);
    }
  

export const getGetTotalsQueryKey = () => [`/api/v1/doners/totals`] as const;
  

    
export const getGetTotalsQueryOptions = <TData = Awaited<ReturnType<typeof getTotals>>, TError = unknown>( options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getTotals>>, TError, TData>, request?: SecondParameter<typeof customInstance>}
): UseQueryOptions<Awaited<ReturnType<typeof getTotals>>, TError, TData> & { queryKey: QueryKey } => {
const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetTotalsQueryKey();

  
  
    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTotals>>> = ({ signal }) => getTotals(requestOptions, signal);
    
      
      
   return  { queryKey, queryFn, ...queryOptions}}

export type GetTotalsQueryResult = NonNullable<Awaited<ReturnType<typeof getTotals>>>
export type GetTotalsQueryError = unknown

/**
 * @summary 총 후원
 */
export const useGetTotals = <TData = Awaited<ReturnType<typeof getTotals>>, TError = unknown>(
  options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getTotals>>, TError, TData>, request?: SecondParameter<typeof customInstance>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetTotalsQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}

/**
 * 어디다 후원을 했는지
 * @summary 후원한 기부 리스트
 */
export const getOrders = (
    params: GetOrdersParams,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      return customInstance<ApiResultPageCompleteResponse>(
      {url: `/api/v1/doners/orders`, method: 'get',
        params, signal
    },
      options);
    }
  

export const getGetOrdersQueryKey = (params: GetOrdersParams,) => [`/api/v1/doners/orders`, ...(params ? [params]: [])] as const;
  

    
export const getGetOrdersQueryOptions = <TData = Awaited<ReturnType<typeof getOrders>>, TError = unknown>(params: GetOrdersParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getOrders>>, TError, TData>, request?: SecondParameter<typeof customInstance>}
): UseQueryOptions<Awaited<ReturnType<typeof getOrders>>, TError, TData> & { queryKey: QueryKey } => {
const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrdersQueryKey(params);

  
  
    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrders>>> = ({ signal }) => getOrders(params, requestOptions, signal);
    
      
      
   return  { queryKey, queryFn, ...queryOptions}}

export type GetOrdersQueryResult = NonNullable<Awaited<ReturnType<typeof getOrders>>>
export type GetOrdersQueryError = unknown

/**
 * @summary 후원한 기부 리스트
 */
export const useGetOrders = <TData = Awaited<ReturnType<typeof getOrders>>, TError = unknown>(
 params: GetOrdersParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getOrders>>, TError, TData>, request?: SecondParameter<typeof customInstance>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetOrdersQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}

/**
 * @summary 기부자 하트 삭제
 */
export const _delete = (
    heartId: number,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<ApiResultHeartResponse>(
      {url: `/api/v1/doners/boards/hearts/${heartId}`, method: 'delete'
    },
      options);
    }
  


export const getDeleteMutationOptions = <TError = unknown,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof _delete>>, TError,{heartId: number}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof _delete>>, TError,{heartId: number}, TContext> => {
 const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof _delete>>, {heartId: number}> = (props) => {
          const {heartId} = props ?? {};

          return  _delete(heartId,requestOptions)
        }

        

 
   return  { mutationFn, ...mutationOptions }}

    export type _DeleteMutationResult = NonNullable<Awaited<ReturnType<typeof _delete>>>
    
    export type _DeleteMutationError = unknown

    /**
 * @summary 기부자 하트 삭제
 */
export const useDelete = <TError = unknown,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof _delete>>, TError,{heartId: number}, TContext>, request?: SecondParameter<typeof customInstance>}
) => {
    
      const mutationOptions = getDeleteMutationOptions(options);
     
      return useMutation(mutationOptions);
    }
    