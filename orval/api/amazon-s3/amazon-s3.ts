/**
 * Generated by orval v6.16.0 üç∫
 * Do not edit manually.
 * Hi Kitty ÌîÑÎ°úÏ†ùÌä∏!!
 * Hi KittyÏùò API Î™ÖÏÑ∏ÏÑúÏûÖÎãàÎã§.
 * OpenAPI spec version: v1
 */
import {
  useQuery,
  useMutation
} from 'react-query'
import type {
  UseQueryOptions,
  UseMutationOptions,
  QueryFunction,
  MutationFunction,
  UseQueryResult,
  QueryKey
} from 'react-query'
import type {
  ApiAmazonS3Response,
  ApiResult,
  UploadBody
} from '../../model'
import { customInstance } from '../../../api/axios';


// eslint-disable-next-line
  type SecondParameter<T extends (...args: any) => any> = T extends (
  config: any,
  args: infer P,
) => any
  ? P
  : never;

/**
 * @summary ÎîîÌè¥Ìä∏ Ïù¥ÎØ∏ÏßÄ Îì±Î°ù API
 */
export const upload = (
    uploadBody: UploadBody,
 options?: SecondParameter<typeof customInstance>,) => {const formData = new FormData();
formData.append('multipartFile', uploadBody.multipartFile)

      return customInstance<ApiAmazonS3Response>(
      {url: `/api/v1/amazons3`, method: 'post',
      headers: {'Content-Type': 'multipart/form-data', },
       data: formData
    },
      options);
    }
  


export const getUploadMutationOptions = <TError = ApiResult,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof upload>>, TError,{data: UploadBody}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof upload>>, TError,{data: UploadBody}, TContext> => {
 const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof upload>>, {data: UploadBody}> = (props) => {
          const {data} = props ?? {};

          return  upload(data,requestOptions)
        }

        

 
   return  { mutationFn, ...mutationOptions }}

    export type UploadMutationResult = NonNullable<Awaited<ReturnType<typeof upload>>>
    export type UploadMutationBody = UploadBody
    export type UploadMutationError = ApiResult

    /**
 * @summary ÎîîÌè¥Ìä∏ Ïù¥ÎØ∏ÏßÄ Îì±Î°ù API
 */
export const useUpload = <TError = ApiResult,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof upload>>, TError,{data: UploadBody}, TContext>, request?: SecondParameter<typeof customInstance>}
) => {
    
      const mutationOptions = getUploadMutationOptions(options);
     
      return useMutation(mutationOptions);
    }
    /**
 * @summary id Í∞íÏúºÎ°ú Ï∞æÎäî API
 */
export const getById1 = (
    id: number,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      return customInstance<ApiAmazonS3Response>(
      {url: `/api/v1/amazons3/${id}`, method: 'get', signal
    },
      options);
    }
  

export const getGetById1QueryKey = (id: number,) => [`/api/v1/amazons3/${id}`] as const;
  

    
export const getGetById1QueryOptions = <TData = Awaited<ReturnType<typeof getById1>>, TError = ApiResult>(id: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getById1>>, TError, TData>, request?: SecondParameter<typeof customInstance>}
): UseQueryOptions<Awaited<ReturnType<typeof getById1>>, TError, TData> & { queryKey: QueryKey } => {
const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetById1QueryKey(id);

  
  
    const queryFn: QueryFunction<Awaited<ReturnType<typeof getById1>>> = ({ signal }) => getById1(id, requestOptions, signal);
    
      
      
   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions}}

export type GetById1QueryResult = NonNullable<Awaited<ReturnType<typeof getById1>>>
export type GetById1QueryError = ApiResult

/**
 * @summary id Í∞íÏúºÎ°ú Ï∞æÎäî API
 */
export const useGetById1 = <TData = Awaited<ReturnType<typeof getById1>>, TError = ApiResult>(
 id: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getById1>>, TError, TData>, request?: SecondParameter<typeof customInstance>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetById1QueryOptions(id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}

/**
 * @summary originalFilenames Í∞íÏúºÎ°ú Ï∞æÎäî API
 */
export const getByOriginalName = (
    originalName: string,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      return customInstance<ApiAmazonS3Response>(
      {url: `/api/v1/amazons3/originalFilenames/${originalName}`, method: 'get', signal
    },
      options);
    }
  

export const getGetByOriginalNameQueryKey = (originalName: string,) => [`/api/v1/amazons3/originalFilenames/${originalName}`] as const;
  

    
export const getGetByOriginalNameQueryOptions = <TData = Awaited<ReturnType<typeof getByOriginalName>>, TError = ApiResult>(originalName: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getByOriginalName>>, TError, TData>, request?: SecondParameter<typeof customInstance>}
): UseQueryOptions<Awaited<ReturnType<typeof getByOriginalName>>, TError, TData> & { queryKey: QueryKey } => {
const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetByOriginalNameQueryKey(originalName);

  
  
    const queryFn: QueryFunction<Awaited<ReturnType<typeof getByOriginalName>>> = ({ signal }) => getByOriginalName(originalName, requestOptions, signal);
    
      
      
   return  { queryKey, queryFn, enabled: !!(originalName), ...queryOptions}}

export type GetByOriginalNameQueryResult = NonNullable<Awaited<ReturnType<typeof getByOriginalName>>>
export type GetByOriginalNameQueryError = ApiResult

/**
 * @summary originalFilenames Í∞íÏúºÎ°ú Ï∞æÎäî API
 */
export const useGetByOriginalName = <TData = Awaited<ReturnType<typeof getByOriginalName>>, TError = ApiResult>(
 originalName: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getByOriginalName>>, TError, TData>, request?: SecondParameter<typeof customInstance>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetByOriginalNameQueryOptions(originalName,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}

